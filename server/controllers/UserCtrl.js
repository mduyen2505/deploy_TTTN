const User = require("../models/UserModel"); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng t·ªõi file model
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const mongoose = require("mongoose");
const sendMail = require("../utils/mailer");
const {
  generateAccessToken,
  generateRefreshToken,
  verifyToken,
} = require("../utils/jwtUtils");
const Otp = require("../models/OTPModel"); // ƒê·∫£m b·∫£o ƒë√£ import model OTP

const generateOtp = () =>
  Math.floor(100000 + Math.random() * 900000).toString();

const register = async (req, res) => {
  const { username, email, password, resPassword } = req.body;

  if (password !== resPassword) {
    return res.status(400).json({ message: "Passwords do not match" });
  }

  try {
    // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i
    const userExists = await User.findOne({ $or: [{ email }, { username }] });
    if (userExists) {
      return res
        .status(400)
        .json({ message: "Username or Email already exists" });
    }

    const saltRounds = 10;

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // T·∫°o user nh∆∞ng ch∆∞a k√≠ch ho·∫°t
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
      isVerified: false, // Ch∆∞a k√≠ch ho·∫°t
    });

    await newUser.save();

    // T·∫°o OTP ng·∫´u nhi√™n
    const otp = generateOtp();

    // BƒÉm OTP tr∆∞·ªõc khi l∆∞u v√†o database
    const hashedOtp = await bcrypt.hash(otp, saltRounds);
    const otpExpiry = new Date(Date.now() + 5 * 60 * 1000); // H·∫øt h·∫°n sau 5 ph√∫t

    await Otp.create({ email, otp: hashedOtp, expiresAt: otpExpiry });

    // G·ª≠i OTP qua email (g·ª≠i OTP g·ªëc, kh√¥ng ph·∫£i OTP ƒë√£ bƒÉm)
    await sendMail(
      email,
      "X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n",
      `<div style="max-width: 480px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px; font-family: Arial, sans-serif; line-height: 1.6; background-color: #f9f9f9;">
  <div style="text-align: center;">
    <h2 style="color: #2c3e50;">üéâ Ch√†o m·ª´ng, ${username}!</h2>
    <p style="font-size: 16px; color: #555;">C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>Glowify cosmetic</strong>. D∆∞·ªõi ƒë√¢y l√† m√£ OTP c·ªßa b·∫°n:</p>
    <div style="display: inline-block; padding: 12px 20px; font-size: 20px; font-weight: bold; color: #ffffff; background-color: #ff758c; border-radius: 5px; margin: 10px 0;">
      ${otp}
    </div>
    <p style="font-size: 14px; color: #555;">Vui l√≤ng nh·∫≠p m√£ OTP n√†y ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω.</p>
    <p style="font-size: 14px; color: #d35400;"><strong>L∆∞u √Ω:</strong> M√£ OTP s·∫Ω h·∫øt h·∫°n sau <strong>5 ph√∫t</strong>.</p>
    <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
    <p style="font-size: 14px; color: #777;">Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi! üíñ</p>
  </div>
</div>`
    );
    res
      .status(201)
      .json({ message: "OTP sent to email. Please verify your account." });
  } catch (err) {
    res
      .status(500)
      .json({ message: "Error registering user", error: err.message });
  }
};
const verifyOtp = async (req, res) => {
  const { email, otp } = req.body;

  try {
    // T√¨m OTP theo email
    const otpRecord = await Otp.findOne({ email });

    if (!otpRecord) {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
    if (otpRecord.expiresAt < new Date()) {
      return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n" });
    }

    // So s√°nh OTP nh·∫≠p v√†o v·ªõi OTP ƒë√£ bƒÉm trong database
    const isMatch = await bcrypt.compare(otp, otpRecord.otp);

    if (!isMatch) {
      return res.status(400).json({ message: "Invalid OTP" });
    }

    // N·∫øu OTP ƒë√∫ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n
    await User.updateOne({ email }, { isVerified: true });

    // X√≥a OTP kh·ªèi database sau khi x√°c th·ª±c th√†nh c√¥ng
    await Otp.deleteOne({ email });

    res.status(200).json({ message: "X√°c th·ª±c th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói x√°c th·ª±c OTP", error: err.message });
  }
};

const login = async (req, res) => {
  const { email, phoneNumber, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Invalid email or password" });
    }
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Invalid email or password" });
    }
    // T·∫°o token
    const token = generateAccessToken(user);
    const refreshToken = generateRefreshToken(user);

    // G·ª≠i refreshToken qua cookie (b·∫£o m·∫≠t h∆°n)
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production", // Ch·ªâ b·∫≠t khi deploy HTTPS
      sameSite: "Lax",
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 ng√†y
    });

    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      refreshToken,
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p", error: err.message });
  }
};

//  GOOGLE AUTH
const googleAuth = async (req, res) => {
  try {
    console.log("User from Google:", req.user);

    if (!req.user) {
      return res
        .status(401)
        .json({ message: "Google authentication th·∫•t b·∫°i" });
    }

    const user = await User.findOne({ googleId: req.user.googleId });

    if (!user) {
      return res
        .status(400)
        .json({ message: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng k√Ω v·ªõi Google" });
    }

    // T·∫°o token
    const token = generateAccessToken(user);
    const refreshToken = generateRefreshToken(user);
    console.log("Access Token:", token);
    console.log("Refresh Token:", refreshToken);
    // L∆∞u refreshToken v√†o cookie
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "Lax",
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 ng√†y
    });

    // Tr·∫£ v·ªÅ token
    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng",
      token,
      refreshToken,
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
      },
    });
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p b·∫±ng Google", error: err.message });
  }
};

//  FACEBOOK AUTH
const facebookAuth = async (req, res) => {
  try {
    if (!req.user) {
      return res
        .status(401)
        .json({ message: "Facebook authentication th·∫•t b·∫°i" });
    }

    const token = generateAccessToken(req.user);
    const refreshToken = generateRefreshToken(req.user);

    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "Lax",
      maxAge: 7 * 24 * 60 * 60 * 1000,
    });

    res.redirect(`deploytttn-production.up.railway.app?token=${token}`);
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p b·∫±ng Facebook", error: err.message });
  }
};

//  REFRESH TOKEN
const refreshAccessToken = async (req, res) => {
  const { refreshToken } = req.cookies;

  if (!refreshToken) {
    return res.status(401).json({ message: "Refresh token kh√¥ng h·ª£p l·ªá" });
  }

  try {
    const decoded = jwt.verify(
      refreshToken,
      process.env.JWT_REFRESH_SECRET || "default_refresh_secret_key"
    );

    if (!decoded) {
      return res
        .status(403)
        .json({ message: "Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    const newToken = generateAccessToken(decoded);
    res.json({ token: newToken });
  } catch (error) {
    res
      .status(403)
      .json({ message: "Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
};

const changePassword = async (req, res) => {
  const { email, oldPassword, newPassword, resNewPassword } = req.body;
  if (newPassword !== resNewPassword) {
    return res.status(400).json({ message: "New passwords do not match" });
  }

  if (!newPassword || newPassword.length < 8) {
    return res
      .status(400)
      .json({ message: "New password must be at least 8 characters long" });
  }

  try {
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    if (
      !oldPassword ||
      typeof oldPassword !== "string" ||
      oldPassword.trim().length === 0
    ) {
      return res
        .status(400)
        .json({
          message:
            "Current password is required and must be a non-empty string",
        });
    }

    const isMatch = await bcrypt.compare(oldPassword, user.password);

    if (!isMatch) {
      return res.status(400).json({ message: "Invalid current password" });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    user.password = hashedPassword;
    await user.save();

    res.json({ message: "Password updated successfully" });
  } catch (err) {
    console.error("Error updating password:", err);
    res
      .status(500)
      .json({ message: "Error updating password", error: err.message });
  }
};

const forgotPassword = async (req, res) => {
  const { email } = req.body;

  try {
    // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res
        .status(400)
        .json({ message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng" });
    }

    // T·∫°o OTP m·ªõi
    const otp = generateOtp();
    const hashedOtp = await bcrypt.hash(otp, 10);
    const otpExpiry = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    // L∆∞u OTP v√†o database
    await Otp.create({ email, otp: hashedOtp, expiresAt: otpExpiry });

    // G·ª≠i OTP qua email
    await sendMail(
      email,
      "Kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      `<div style="max-width: 480px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px; font-family: Arial, sans-serif; line-height: 1.6; background-color: #f9f9f9;">
  <div style="text-align: center;">
    <h2 style="color: #2c3e50; font-size: 24px;">üîë Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h2>
    <p style="font-size: 16px; color: #555;">M√£ OTP c·ªßa b·∫°n l√†:</p>
    <div style="display: inline-block; padding: 12px 20px; font-size: 24px; font-weight: bold; color: #ffffff; background-color: #ff758c; border-radius: 5px; margin: 10px 0;">
      ${otp}
    </div>
    <p style="font-size: 14px; color: #555;">Vui l√≤ng nh·∫≠p m√£ OTP n√†y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. M√£ OTP s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.</p>
    <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
    <p style="font-size: 14px; color: #777;">Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi! üíñ</p>
  </div>
</div>`
    );

    res.status(200).json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi g·ª≠i OTP", error: err.message });
  }
};

const resetPassword = async (req, res) => {
  const { email, otp, newPassword } = req.body;

  try {
    // T√¨m OTP trong database
    const otpRecord = await Otp.findOne({ email });

    if (!otpRecord) {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    // Ki·ªÉm tra OTP c√≥ h·∫øt h·∫°n kh√¥ng
    if (otpRecord.expiresAt < new Date()) {
      return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n" });
    }

    // Ki·ªÉm tra OTP nh·∫≠p v√†o c√≥ ƒë√∫ng kh√¥ng
    const isMatch = await bcrypt.compare(otp, otpRecord.otp);
    if (!isMatch) {
      return res.status(400).json({ message: "OTP kh√¥ng ch√≠nh x√°c" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database
    await User.updateOne({ email }, { password: hashedPassword });

    // X√≥a OTP sau khi s·ª≠ d·ª•ng
    await Otp.deleteOne({ email });

    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng" });
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", error: err.message });
  }
};

const getUser = async (req, res) => {
  try {
    const user = await User.find();
    res.status(200).json(user);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
const updateUser = async (req, res) => {
  try {
    // L·∫•y token t·ª´ header
    const token = req.headers.authorization?.split(" ")[1]; // Token d·∫°ng "Bearer <token>"
    // Ki·ªÉm tra token
    if (!token) {
      return res
        .status(401)
        .json({ message: "Access denied. No token provided." });
    }
    let decoded; // Khai b√°o bi·∫øn decoded
    // Gi·∫£i m√£ token
    try {
      decoded = jwt.verify(
        token,
        process.env.JWT_SECRET || "default_secret_key"
      );
    } catch (error) {
      return res.status(401).json({ message: "Invalid token" });
    }

    const userId = decoded.id;

    const allowedFields = ["username", "phoneNumber", "email", "address"];
    const updatedData = {}; // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng l∆∞u tr·ªØ d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    // Ch·ªâ th√™m c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t v√†o updatedData
    for (const field of allowedFields) {
      if (req.body[field] !== undefined) {
        updatedData[field] = req.body[field];
      }
    }
    // T√¨m ng∆∞·ªùi d√πng v√† c·∫≠p nh·∫≠t th√¥ng tin
    const updatedUser = await User.findByIdAndUpdate(userId, updatedData, {
      new: true, // Tr·∫£ v·ªÅ t√†i li·ªáu ƒë√£ c·∫≠p nh·∫≠t
      runValidators: true, // Ch·∫°y x√°c th·ª±c cho c√°c tr∆∞·ªùng
    });
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
    if (!updatedUser) {
      return res.status(404).json({ message: "User not found" });
    }
    res.status(200).json({
      message: "User updated successfully",
      user: updatedUser,
    });
  } catch (error) {
    // Ghi log l·ªói n·∫øu c·∫ßn thi·∫øt
    console.error(error);
    res.status(500).json({ message: error.message });
  }
};
const deleteUser = async (req, res) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
      console.log("Kh√¥ng t√¨m th·∫•y token");
      return res
        .status(401)
        .json({ message: "Access denied. No token provided." });
    }

    const decoded = jwt.verify(
      token,
      process.env.JWT_SECRET || "default_secret_key"
    );
    console.log("Decoded Token:", decoded);

    const userIdFromToken = decoded.id;
    const isAdmin = decoded.isadmin;

    console.log(" User ID from token:", userIdFromToken);
    console.log(" Is Admin:", isAdmin);

    let { id } = req.params;
    console.log(" User ID t·ª´ request:", id);

    // N·∫øu id = "me", g√°n id = userIdFromToken
    if (id === "me") {
      id = userIdFromToken;
    }

    // Cho ph√©p user x√≥a ch√≠nh t√†i kho·∫£n c·ªßa m√¨nh
    if (id === userIdFromToken) {
      console.log("Cho ph√©p x√≥a t√†i kho·∫£n ch√≠nh m√¨nh");

      if (!mongoose.Types.ObjectId.isValid(id)) {
        console.log("ID kh√¥ng h·ª£p l·ªá:", id);
        return res.status(400).json({ message: "Invalid user ID" });
      }

      const deletedUser = await User.findByIdAndDelete(id);
      if (!deletedUser) {
        console.log("Kh√¥ng t√¨m th·∫•y user ƒë·ªÉ x√≥a");
        return res.status(404).json({ message: "User not found" });
      }

      console.log("User ƒë√£ b·ªã x√≥a:", deletedUser);
      return res.status(200).json({
        message: "User account deleted successfully",
        user: deletedUser,
      });
    }

    // N·∫øu l√† admin, c√≥ quy·ªÅn x√≥a b·∫•t k·ª≥ user n√†o
    if (isAdmin) {
      console.log("Admin x√≥a user kh√°c");

      if (!mongoose.Types.ObjectId.isValid(id)) {
        console.log("ID kh√¥ng h·ª£p l·ªá:", id);
        return res.status(400).json({ message: "Invalid user ID" });
      }

      const deletedUser = await User.findByIdAndDelete(id);
      if (!deletedUser) {
        console.log("Kh√¥ng t√¨m th·∫•y user ƒë·ªÉ x√≥a");
        return res.status(404).json({ message: "User not found" });
      }

      console.log("Admin ƒë√£ x√≥a user:", deletedUser);
      return res.status(200).json({
        message: "Admin deleted user successfully",
        user: deletedUser,
      });
    }

    // N·∫øu kh√¥ng ph·∫£i admin & kh√¥ng ph·∫£i ch·ªß t√†i kho·∫£n => C·∫•m x√≥a
    console.log("Permission denied");
    return res.status(403).json({ message: "Permission denied" });
  } catch (error) {
    console.log("L·ªói server:", error.message);
    res.status(500).json({ message: error.message });
  }
};

// ƒêƒÉng xu·∫•t
const logout = async (req, res) => {
  const { refreshToken } = req.body;
  // N·∫øu kh√¥ng c√≥ refreshToken, tr·∫£ v·ªÅ l·ªói
  if (!refreshToken) {
    return res.status(401).json({ message: "No refresh token provided" });
  }
  try {
    // T√¨m ng∆∞·ªùi d√πng d·ª±a tr√™n refreshToken
    const user = await User.findOne({ refreshToken });
    if (!user) {
      return res.status(403).json({ message: "Invalid refresh token" });
    }
    // X√≥a refreshToken kh·ªèi c∆° s·ªü d·ªØ li·ªáu
    user.refreshToken = null;
    await user.save();
    res.status(200).json({ message: "Logout successful" });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error during logout", error: error.message });
  }
};
// L·∫•y s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng v√† t·ª∑ l·ªá tƒÉng tr∆∞·ªüng
const getUserGrowth = async (req, res) => {
  try {
    const now = new Date();

    // T√≠nh ng√†y ƒë·∫ßu ti√™n c·ªßa tu·∫ßn hi·ªán t·∫°i
    const startOfCurrentWeek = new Date(now);
    startOfCurrentWeek.setDate(now.getDate() - now.getDay());
    startOfCurrentWeek.setHours(0, 0, 0, 0);

    // T√≠nh ng√†y ƒë·∫ßu ti√™n c·ªßa tu·∫ßn tr∆∞·ªõc
    const startOfLastWeek = new Date(startOfCurrentWeek);
    startOfLastWeek.setDate(startOfCurrentWeek.getDate() - 7);

    // T√≠nh ng√†y cu·ªëi c√πng c·ªßa tu·∫ßn tr∆∞·ªõc
    const endOfLastWeek = new Date(startOfCurrentWeek);

    // ƒê·∫øm s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng trong tu·∫ßn hi·ªán t·∫°i
    const currentCount = await User.countDocuments({
      createdAt: { $gte: startOfCurrentWeek },
    });

    // ƒê·∫øm s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng trong tu·∫ßn tr∆∞·ªõc
    const previousWeekCount = await User.countDocuments({
      createdAt: { $gte: startOfLastWeek, $lt: endOfLastWeek },
    });

    // T√≠nh t·ª∑ l·ªá tƒÉng tr∆∞·ªüng
    const growthPercentage =
      previousWeekCount === 0
        ? 100 // N·∫øu tu·∫ßn tr∆∞·ªõc kh√¥ng c√≥ ng∆∞·ªùi d√πng
        : ((currentCount - previousWeekCount) / previousWeekCount) * 100;

    res.status(200).json({
      success: true,
      data: {
        currentCount,
        previousWeekCount,
        growthPercentage: growthPercentage.toFixed(2), // L√†m tr√≤n 2 ch·ªØ s·ªë
      },
    });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

const getUserById = async (req, res) => {
  try {
    // L·∫•y token t·ª´ header
    const token = req.headers.authorization?.split(" ")[1]; // Token d·∫°ng "Bearer <token>"

    // Ki·ªÉm tra token
    if (!token) {
      return res
        .status(401)
        .json({ message: "Access denied. No token provided." });
    }

    // Gi·∫£i m√£ token
    let decoded;
    try {
      decoded = jwt.verify(
        token,
        process.env.JWT_SECRET || "default_secret_key"
      );
    } catch (error) {
      return res.status(401).json({ message: "Invalid or expired token" });
    }

    // L·∫•y user ID t·ª´ token
    const userId = decoded.id;

    // T√¨m ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    const user = await User.findById(userId).select("-password -refreshToken"); // Lo·∫°i b·ªè password v√† refreshToken

    // N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
    res.status(200).json({
      success: true,
      data: user,
    });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching user data", error: error.message });
  }
};

// Th√™m s·∫£n ph·∫©m v√†o danh s√°ch y√™u th√≠ch
const addToWishlist = async (req, res) => {
  try {
    const { productId } = req.body;
    const userId = req.user.id;
    if (
      !mongoose.Types.ObjectId.isValid(userId) ||
      !mongoose.Types.ObjectId.isValid(productId)
    ) {
      return res.status(400).json({ message: "Invalid userId or productId" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    if (user.wishlist.includes(productId)) {
      return res.status(400).json({ message: "Product already in wishlist" });
    }

    user.wishlist.push(productId);
    await user.save();

    res
      .status(200)
      .json({ message: "Product added to wishlist", wishlist: user.wishlist });
  } catch (error) {
    console.error("Error adding to wishlist:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m y√™u th√≠ch
exports.getWishlist = async (req, res) => {
  try {
    const { userId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "Invalid userId" });
    }

    const user = await User.findById(userId).populate("wishlist");
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    res.status(200).json({ wishlist: user.wishlist });
  } catch (error) {
    console.error("Error fetching wishlist:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};
// L·∫•y danh s√°ch s·∫£n ph·∫©m y√™u th√≠ch
const getWishlist = async (req, res) => {
  try {
    const userId = req.user.id; // L·∫•y userId t·ª´ token

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "Invalid userId" });
    }

    const user = await User.findById(userId)
      .populate("wishlist") // L·∫•y to√†n b·ªô th√¥ng tin s·∫£n ph·∫©m
      .exec(); // ƒê·∫£m b·∫£o truy v·∫•n ƒë∆∞·ª£c th·ª±c hi·ªán ƒë√∫ng

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    res.status(200).json({ wishlist: user.wishlist });
  } catch (error) {
    console.error("Error fetching wishlist:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch
const removeFromWishlist = async (req, res) => {
  try {
    const userId = req.user.id; // L·∫•y userId t·ª´ token
    const { productId } = req.body;

    if (!mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(400).json({ message: "Invalid productId" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ trong wishlist kh√¥ng
    if (!user.wishlist.includes(productId)) {
      return res.status(400).json({ message: "Product not found in wishlist" });
    }

    // X√≥a s·∫£n ph·∫©m kh·ªèi wishlist
    user.wishlist = user.wishlist.filter((id) => id.toString() !== productId);
    await user.save();

    res
      .status(200)
      .json({
        message: "Product removed from wishlist",
        wishlist: user.wishlist,
      });
  } catch (error) {
    console.error("Error removing from wishlist:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

module.exports = {
  register,
  verifyOtp,
  login,
  googleAuth,
  facebookAuth,
  forgotPassword,
  resetPassword,
  changePassword,
  getUser,
  refreshAccessToken,
  updateUser,
  deleteUser,
  logout,
  getUserGrowth,
  getUserById,
  addToWishlist,
  getWishlist,
  removeFromWishlist,
};
